openapi: "3.0.3"
info:
  title: "Order Service API"
  description: "API для сервиса заказов"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
paths:
  /users/freelancer/{id}:
    get:
      summary: "Получить информацию о фрилансере"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FreelancerDto"
        "400":
          description: "Bad Request"
  /users:
    put:
      summary: "Обновить информацию о фрилансере"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFreelancerRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
  /projects:
    get:
      summary: "Получить список проектов"
      parameters:
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            default: 50
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProjectsResponse"
    post:
      summary: "Создать новый проект"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDto"
        "401":
          description: "Unauthorized"
  /projects/{id}:
    get:
      summary: "Получить информацию о проекте"
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectDto"
        "401":
          description: "Unauthorized"
    put:
      summary: "Обновить проект"
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
  /projects/{id}/close:
    post:
      summary: "Закрыть проект"
      security:
        - bearerAuth: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
  /projects/freelancer:
    get:
      summary: "Получить проекты фрилансера"
      security:
        - bearerAuth: []
      parameters:
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProjectsResponse"
        "401":
          description: "Unauthorized"
  /projects/client:
    get:
      summary: "Получить проекты клиента"
      security:
        - bearerAuth: []
      parameters:
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProjectsResponse"
        "401":
          description: "Unauthorized"
  /projects/search:
    get:
      summary: "Поиск проектов"
      parameters:
        - name: "q"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
        - name: "limit"
          in: "query"
          schema:
            type: "integer"
            default: 50
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProjectsResponse"
        "400":
          description: "Bad Request"
  /projects/generate-description:
    post:
      summary: "Сгенерировать описание проекта"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateDescriptionRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateDescriptionResponse"
        "401":
          description: "Unauthorized"
  /notifications:
    get:
      summary: "Получить уведомления пользователя"
      security:
        - bearerAuth: []
      parameters:
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetNotificationsResponse"
        "401":
          description: "Unauthorized"
  /chats:
    get:
      summary: "Получить список чатов пользователя"
      security:
        - bearerAuth: []
      parameters:
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetChatsResponse"
        "401":
          description: "Unauthorized"
  /chats/{chatId}:
    get:
      summary: "Получить информацию о чате"
      security:
        - bearerAuth: []
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatDto"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /chats/{chatId}/messages:
    get:
      summary: "Получить сообщения чата"
      security:
        - bearerAuth: []
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "offset"
          in: "query"
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetMessagesResponse"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
    post:
      summary: "Отправить сообщение в чат"
      security:
        - bearerAuth: []
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMessageRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /chats/{chatId}/read:
    post:
      summary: "Отметить сообщения чата как прочитанные"
      security:
        - bearerAuth: []
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /chats/{chatId}/ws:
    get:
      summary: "WebSocket соединение для чата"
      security:
        - bearerAuth: []
      parameters:
        - name: "chatId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "101":
          description: "Switching Protocols"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
components:
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
  schemas:
    FreelancerDto:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        imageUrl:
          type: "string"
        description:
          type: "string"
        skills:
          type: "array"
          items:
            type: "string"
        rating:
          type: "number"
          format: "double"
        reviews:
          type: "array"
          items:
            $ref: "#/components/schemas/ReviewDto"
    ReviewDto:
      type: "object"
      properties:
        title:
          type: "string"
        text:
          type: "string"
        rate:
          type: "integer"
          format: "int32"
    UpdateFreelancerRequest:
      type: "object"
      properties:
        description:
          type: "string"
        skills:
          type: "array"
          items:
            type: "string"
    ProjectDto:
      type: "object"
      properties:
        id:
          type: "string"
        title:
          type: "string"
        description:
          type: "string"
        budget:
          type: "number"
          format: "double"
        deadline:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum: ["OPEN", "IN_PROGRESS", "CLOSED"]
        client:
          $ref: "#/components/schemas/AuthorDto"
        freelancer:
          $ref: "#/components/schemas/AuthorDto"
        skills:
          type: "array"
          items:
            type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    AuthorDto:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        imageUrl:
          type: "string"
    CreateProjectRequest:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        budget:
          type: "number"
          format: "double"
        deadline:
          type: "string"
          format: "date-time"
        skills:
          type: "array"
          items:
            type: "string"
    UpdateProjectRequest:
      type: "object"
      properties:
        title:
          type: "string"
        description:
          type: "string"
        budget:
          type: "number"
          format: "double"
        deadline:
          type: "string"
          format: "date-time"
        skills:
          type: "array"
          items:
            type: "string"
    GetProjectsResponse:
      type: "object"
      properties:
        projects:
          type: "array"
          items:
            $ref: "#/components/schemas/ProjectDto"
    GenerateDescriptionRequest:
      type: "object"
      properties:
        prompt:
          type: "string"
    GenerateDescriptionResponse:
      type: "object"
      properties:
        description:
          type: "string"
    NotificationDto:
      type: "object"
      properties:
        id:
          type: "string"
        userId:
          type: "string"
        projectId:
          type: "string"
        title:
          type: "string"
        message:
          type: "string"
        type:
          type: "string"
          enum: ["PROJECT_CREATED", "PROJECT_UPDATED", "PROJECT_CLOSED", "NEW_RESPONSE", "RESPONSE_ACCEPTED", "RESPONSE_REJECTED"]
        createdAt:
          type: "string"
          format: "date-time"
        responseId:
          type: "string"
        isRead:
          type: "boolean"
    GetNotificationsResponse:
      type: "object"
      properties:
        notifications:
          type: "array"
          items:
            $ref: "#/components/schemas/NotificationDto"
        total:
          type: "integer"
          format: "int64"
    ChatDto:
      type: "object"
      properties:
        id:
          type: "string"
        projectId:
          type: "string"
        clientId:
          type: "string"
        freelancerId:
          type: "string"
        title:
          type: "string"
        lastMessage:
          $ref: "#/components/schemas/MessageDto"
        unreadCount:
          type: "integer"
          format: "int32"
    MessageDto:
      type: "object"
      properties:
        id:
          type: "string"
        chatId:
          type: "string"
        senderId:
          type: "string"
        text:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
        isRead:
          type: "boolean"
    GetChatsResponse:
      type: "object"
      properties:
        chats:
          type: "array"
          items:
            $ref: "#/components/schemas/ChatDto"
    GetMessagesResponse:
      type: "object"
      properties:
        messages:
          type: "array"
          items:
            $ref: "#/components/schemas/MessageDto"
    CreateMessageRequest:
      type: "object"
      properties:
        text:
          type: "string"